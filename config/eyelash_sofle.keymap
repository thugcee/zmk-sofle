#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&gresc { mods = <(MOD_LSFT|MOD_RSFT)>; };

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        home {
            bindings = <&kp HOME>;
            key-positions = <34 35>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <36 37>;
        };

        next-word {
            bindings = <&kp LC(RIGHT)>;
            key-positions = <49 50>;
        };

        prev-word {
            bindings = <&kp LC(LEFT)>;
            key-positions = <47 48>;
        };
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&gresc        &kp N1        &kp N2     &kp N3        &kp N4       &kp N5       &kp UP_ARROW     &kp N6         &kp N7       &kp N8     &kp N9           &kp N0      &kp EQUAL
&lt 2 TAB     &kp Q         &kp W      &kp E         &kp R        &kp T        &kp DOWN_ARROW   &kp Y          &kp U        &kp I      &kp O            &kp P       &lt 2 MINUS
&kp LCTRL     &kp A         &kp S      &kp D         &kp F        &kp G        &kp LEFT_ARROW   &kp H          &kp J        &kp K      &kp L            &kp SEMI    &kp APOS
&kp KP_ENTER  &kp Z         &kp X      &kp C         &kp V        &kp B        &kp RIGHT_ARROW  &kp N          &kp M        &kp COMMA  &kp DOT          &kp FSLH    &kp ENTER
&kp C_MUTE    &kp LEFT_GUI  &kp LCTRL  &kp LEFT_ALT  &lt 1 SPACE  &sk LSHFT    &kp SPACE        &kp BACKSPACE  &lt 1 SPACE  &kp RALT   &sk RIGHT_SHIFT  &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp F12     &kp F1           &kp F2           &kp F3           &kp F4           &kp F5         &mmv MOVE_UP     &kp F6    &kp F7     &kp F8    &kp F9     &kp F10        &kp F11
&trans      &kp GRAVE        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LC(X)      &mmv MOVE_DOWN   &kp INS   &kp PG_UP  &kp UP    &trans     &kp MINUS      &kp F12
&trans      &kp TILDE        &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp LC(C)      &mmv MOVE_LEFT   &kp HOME  &kp LEFT   &kp DOWN  &kp RIGHT  &kp END        &trans
&trans      &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp LS(INS)    &mmv MOVE_RIGHT  &kp DEL   &kp PG_DN  &kp LBKT  &kp RBKT   &kp BACKSLASH  &trans
&kp C_MUTE  &trans           &trans           &trans           &trans           &trans         &mkp LCLK        &trans    &trans     &trans    &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp TILDE       &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &rgb_ug RGB_COLOR_HSB(185,72,36)  &rgb_ug RGB_COLOR_HSB(327,82,45)  &rgb_ug RGB_COLOR_HSB(39,100,50)  &trans           &kp C_VOLUME_UP  &trans
&studio_unlock  &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &rgb_ug RGB_ON                    &rgb_ug RGB_OFF                   &rgb_ug RGB_BRI                   &rgb_ug RGB_BRD  &kp C_MUTE       &trans
&trans          &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &rgb_ug RGB_EFF                   &rgb_ug RGB_EFR                   &trans                            &trans           &kp C_VOL_DN     &trans
&trans          &sys_reset    &trans          &trans        &trans        &bootloader     &mmv MOVE_RIGHT  &rgb_ug RGB_SPI                   &rgb_ug RGB_SPD                   &sys_reset                        &soft_off        &bootloader      &trans
&trans          &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans                            &trans                            &trans                            &trans           &kp C_SLEEP
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
